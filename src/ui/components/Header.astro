---
import { getRelativeLocaleUrl } from "astro:i18n";
import Link from "@/ui/components/Link.astro";
import Container from "@/ui/components/Container.astro";
import Icon from "@/ui/components/Icon/Icon.astro";
import Modal from "@/ui/components/Modal.astro";
import { PAGES } from "@/constants/pages";
import { useUrl } from "@/ui/hooks/useUrl";
import { useTranslation } from "@/ui/hooks/useTranslation";

const { getLangFromUrl } = useUrl();
const lang = getLangFromUrl(Astro.url);
const t = useTranslation(lang);
---

<header>
  <Container>
    <div class="flex flex-wrap gap-y-2 justify-between">
      <Link href={getRelativeLocaleUrl(lang, PAGES[lang].HOME)} className="flex items-center gap-1">
        <Icon name="logo" size={36} />

        <div class="font-semibold">JUCODEV</div>
      </Link>
      <nav class="flex items-center gap-1">
        <button id="lang_selector_trigger" type="button"
          ><Icon name="language" size={20} /></button
        >

        <span>|</span>
        <Link
          href={getRelativeLocaleUrl(lang, PAGES[lang].BLOG)}
          isUnderline={true}>{t("nav.blog")}</Link
        >
        <span>/</span>
        <Link href={getRelativeLocaleUrl(lang, PAGES[lang].WORK)} isUnderline
          >{t("nav.work")}</Link
        >
        <span>/</span>
        <Link
          href={getRelativeLocaleUrl(lang, PAGES[lang].PROJECTS)}
          isUnderline>{t("nav.projects")}</Link
        >
      </nav>
    </div>
  </Container>
</header>

<Modal id="modal_lang" title={t("language.label")}>
  <div class="flex gap-10 justify-around">
    {
      [
        {
          id: "button_en_language",
          label: t("language.en_label"),
        },
        {
          id: "button_es_language",
          label: t("language.es_label"),
        },
      ].map((el) => (
        <button type="button" id={el.id}>
          {el.label}
        </button>
      ))
    }
  </div>
</Modal>

<script>
  import { LANGUAGES } from "@/i18n/config";
  import { useModal } from "@/ui/hooks/useModal";
  import { useUrl } from "@/ui/hooks/useUrl";
  import { useNavigation } from "@/ui/hooks/useNavigation";

  function init() {
    const { getUrlFromClient, getRelativeUrlByLang } = useUrl();
    const { redirect } = useNavigation();
    const url = getUrlFromClient();
    const { onOpen } = useModal("#modal_lang");

    const showModalButton = document.querySelector("#lang_selector_trigger");
    const enLanguageButton = document.querySelector("#button_en_language");
    const esLanguageButton = document.querySelector("#button_es_language");

    showModalButton?.addEventListener("click", () => {
      onOpen();
    });

    enLanguageButton?.addEventListener("click", () => {
      const relativeUrl = getRelativeUrlByLang(url, LANGUAGES.en);
      redirect(relativeUrl);
    });

    esLanguageButton?.addEventListener("click", () => {
      const relativeUrl = getRelativeUrlByLang(url, LANGUAGES.es);
      redirect(relativeUrl);
    });
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
</script>
