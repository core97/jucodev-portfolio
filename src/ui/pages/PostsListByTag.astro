---
import { type InferEntrySchema, type Render } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import Layout from "@/ui/layouts/Layout.astro";
import Container from "@/ui/components/Container.astro";
import ArrowCard from "@/ui/components/Cards/ArrowCard.astro";
import { PAGES } from "@/constants/pages";
import { useUrl } from "@/ui/hooks/useUrl";
import { useTranslation } from "@/ui/hooks/useTranslation";
import { snakeToTitleCase } from "@/utils/text";

interface Props {
  posts: Array<
    {
      id: string;
      slug: string;
      body: string;
      collection: "posts";
      data: InferEntrySchema<"posts">;
    } & {
      render(): Render[".md"];
    }
  >;
  tag: string;
}

const { getLangFromUrl } = useUrl();
const lang = getLangFromUrl(Astro.url);
const t = useTranslation(lang);

const { posts, tag } = Astro.props;
const tagParsed = snakeToTitleCase(tag);
---

<Layout
  title={t("metatag.blog_by_tag.title").replace("{{tag}}", tagParsed)}
  description={t("metatag.blog_by_tag.description").replaceAll(
    "{{tag}}",
    tagParsed
  )}
>
  <Container>
    <div class="mb-6">
      <h3
        class="font-bold text-xl underline underline-offset-4 decoration-wavy animate-blur-fade"
      >
        {`# ${tag}`}
      </h3>
    </div>
    <ul class="flex flex-col gap-4">
      {
        posts
          .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
          .map((post) => (
            <li class="animate-blur-fade">
              <ArrowCard
                id={post.id}
                tags={post.data.tags}
                title={post.data.title}
                description={post.data.description}
                href={getRelativeLocaleUrl(
                  lang,
                  `${PAGES[lang].BLOG}/${post.slug}`
                )}
              />
            </li>
          ))
      }
    </ul>
  </Container>
</Layout>
